typedef Float_Fpclass  = Dynamic;

typedef Float_T  = Float;

typedef Float_T  = OCamlArray<Float>;

@:native("Float")
extern class OCamlFloat {
public static function neg(a0:Float):Float;
public static function add(a0:Float,a1:Float):Float;
public static function sub(a0:Float,a1:Float):Float;
public static function mul(a0:Float,a1:Float):Float;
public static function div(a0:Float,a1:Float):Float;
public static function rem(a0:Float,a1:Float):Float;
public static function fma(a0:Float,a1:Float,a2:Float):Float;
public static function abs(a0:Float):Float;
public static var zero:Float;
public static var one:Float;
public static var minus_one:Float;
public static var infinity:Float;
public static var neg_infinity:Float;
public static var nan:Float;
public static function is_finite(a0:Float):Bool;
public static function is_infinite(a0:Float):Bool;
public static function is_nan(a0:Float):Bool;
public static var pi:Float;
public static var max_float:Float;
public static var min_float:Float;
public static var epsilon:Float;
public static function of_int(a0:Int):Float;
public static function to_int(a0:Float):Int;
public static function of_string(a0:String):Float;
public static function of_string_opt(a0:String):Dynamic;
public static function to_string(a0:Float):String;
public static function classify_float(a0:Dynamic):Dynamic;
public static function pow(a0:Float,a1:Float):Float;
public static function sqrt(a0:Float):Float;
public static function exp(a0:Float):Float;
public static function log(a0:Float):Float;
public static function log10(a0:Float):Float;
public static function expm1(a0:Float):Float;
public static function log1p(a0:Float):Float;
public static function cos(a0:Float):Float;
public static function sin(a0:Float):Float;
public static function tan(a0:Float):Float;
public static function acos(a0:Float):Float;
public static function asin(a0:Float):Float;
public static function atan(a0:Float):Float;
public static function atan2(a0:Float,a1:Float):Float;
public static function hypot(a0:Float,a1:Float):Float;
public static function cosh(a0:Float):Float;
public static function sinh(a0:Float):Float;
public static function tanh(a0:Float):Float;
public static function trunc(a0:Float):Float;
public static function round(a0:Float):Float;
public static function ceil(a0:Float):Float;
public static function floor(a0:Float):Float;
public static function is_integer(a0:Float):Bool;
public static function next_after(a0:Float,a1:Float):Float;
public static function succ(a0:Float):Float;
public static function pred(a0:Float):Float;
public static function copy_sign(a0:Float,a1:Float):Float;
public static function sign_bit(a0:Dynamic):Bool;
public static function frexp(a0:Float):Dynamic;
public static var ldexp:Dynamic;
public static function modf(a0:Float):Dynamic;
public static function compare(a0:Float,a1:Float):Int;
public static function equal(a0:Float,a1:Float):Bool;
public static function min(a0:Float,a1:Float):Float;
public static function max(a0:Float,a1:Float):Float;
public static function min_max(a0:Float,a1:Float):Dynamic;
public static function min_num(a0:Float,a1:Float):Float;
public static function max_num(a0:Float,a1:Float):Float;
public static function min_max_num(a0:Float,a1:Float):Dynamic;
public static function seeded_hash_param(a0:Int,a1:Int,a2:Int,a3:Float):Int;
public static function hash(a0:Float):Int;
public static function length(a0:Dynamic):Int;
public static function get(a0:Dynamic,a1:Int):Float;
public static function set(a0:Dynamic,a1:Int,a2:Float):Void;
public static function create(a0:Int):Dynamic;
public static function unsafe_get(a0:Dynamic,a1:Int):Float;
public static function unsafe_set(a0:Dynamic,a1:Int,a2:Float):Void;
public static function unsafe_fill(a0:Dynamic,a1:Int,a2:Int,a3:Float):Void;
public static function unsafe_blit(a0:Dynamic,a1:Int,a2:Dynamic,a3:Int,a4:Int):Void;
public static function check(a0:Dynamic,a1:Int,a2:Int,a3:String):Void;
public static function make(a0:Int,a1:Float):Dynamic;
public static function init(a0:Int,a1:Int->Float):Dynamic;
public static function append(a0:Dynamic,a1:Dynamic):Dynamic;
public static function ensure_ge(a0:Int,a1:Int):Int;
public static function sum_lengths(a0:Int,a1:Dynamic):Int;
public static function concat(a0:Dynamic):Dynamic;
public static function sub(a0:Dynamic,a1:Int,a2:Int):Dynamic;
public static function copy(a0:Dynamic):Dynamic;
public static function fill(a0:Dynamic,a1:Int,a2:Int,a3:Float):Void;
public static function blit(a0:Dynamic,a1:Int,a2:Dynamic,a3:Int,a4:Int):Void;
public static function to_list(a0:Dynamic):Array<Float>;
public static function of_list(a0:Array<Float>):Dynamic;
public static function iter(a0:Float->Dynamic,a1:Dynamic):Void;
public static function iter2(a0:Float->Float->Dynamic,a1:Dynamic,a2:Dynamic):Void;
public static function map(a0:Float->Float,a1:Dynamic):Dynamic;
public static function map2(a0:Float->Float->Float,a1:Dynamic,a2:Dynamic):Dynamic;
public static function iteri(a0:Int->Float->Dynamic,a1:Dynamic):Void;
public static function mapi(a0:Int->Float->Float,a1:Dynamic):Dynamic;
public static function fold_left(a0:Dynamic->Float->Dynamic,a1:Dynamic,a2:Dynamic):Dynamic;
public static function fold_right(a0:Float->Dynamic->Dynamic,a1:Dynamic,a2:Dynamic):Dynamic;
public static function exists(a0:Float->Bool,a1:Dynamic):Bool;
public static function for_all(a0:Float->Bool,a1:Dynamic):Bool;
public static function mem(a0:Float,a1:Dynamic):Bool;
public static function mem_ieee(a0:Float,a1:Dynamic):Bool;
public static function sort(a0:Float->Float->Int,a1:Dynamic):Void;
public static var cutoff:Int;
public static function stable_sort(a0:Float->Float->Int,a1:Dynamic):Void;
public static function fast_sort(a0:Float->Float->Int,a1:Dynamic):Void;
public static function to_seq(a0:Dynamic):Dynamic;
public static function to_seqi(a0:Dynamic):Dynamic;
public static function of_rev_list(a0:Array<Float>):Dynamic;
public static function of_seq(a0:Dynamic):Dynamic;
public static function map_to_array(a0:Float->Dynamic,a1:Dynamic):Dynamic;
public static function map_from_array(a0:Dynamic->Float,a1:Dynamic):Dynamic;
}