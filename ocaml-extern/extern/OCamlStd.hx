typedef Std_Fpclass  = Dynamic;

typedef Std_Open_flag  = Dynamic;

@:native("Stdlib")
extern class OCamlStd {
public static function register_named_value(a0:String,a1:Dynamic):Void;
public static function raise(a0:Dynamic):Dynamic;
public static function raise_notrace(a0:Dynamic):Dynamic;
public static function failwith(a0:String):Dynamic;
public static function invalid_arg(a0:String):Dynamic;
public static var __LOC__:String;
public static var __FILE__:String;
public static var __LINE__:Int;
public static var __MODULE__:String;
public static var __POS__:Dynamic;
public static var __FUNCTION__:String;
public static function __LOC_OF__(a0:Dynamic):Dynamic;
public static function __LINE_OF__(a0:Dynamic):Dynamic;
public static function __POS_OF__(a0:Dynamic):Dynamic;
public static function compare(a0:Dynamic,a1:Dynamic):Int;
public static function min(a0:Dynamic,a1:Dynamic):Dynamic;
public static function max(a0:Dynamic,a1:Dynamic):Dynamic;
public static function not(a0:Bool):Bool;
public static function succ(a0:Int):Int;
public static function pred(a0:Int):Int;
public static function abs(a0:Int):Int;
public static function lnot(a0:Int):Int;
public static var max_int:Int;
public static var min_int:Int;
public static function exp(a0:Float):Float;
public static function expm1(a0:Float):Float;
public static function acos(a0:Float):Float;
public static function asin(a0:Float):Float;
public static function atan(a0:Float):Float;
public static function atan2(a0:Float,a1:Float):Float;
public static function hypot(a0:Float,a1:Float):Float;
public static function cos(a0:Float):Float;
public static function cosh(a0:Float):Float;
public static function log(a0:Float):Float;
public static function log10(a0:Float):Float;
public static function log1p(a0:Float):Float;
public static function sin(a0:Float):Float;
public static function sinh(a0:Float):Float;
public static function sqrt(a0:Float):Float;
public static function tan(a0:Float):Float;
public static function tanh(a0:Float):Float;
public static function ceil(a0:Float):Float;
public static function floor(a0:Float):Float;
public static function abs_float(a0:Float):Float;
public static function copysign(a0:Float,a1:Float):Float;
public static function mod_float(a0:Float,a1:Float):Float;
public static function frexp(a0:Float):Dynamic;
public static var ldexp:Dynamic;
public static function modf(a0:Float):Dynamic;
public static function float(a0:Int):Float;
public static function float_of_int(a0:Int):Float;
public static function truncate(a0:Float):Int;
public static function int_of_float(a0:Float):Int;
public static function float_of_bits(a0:Dynamic):Float;
public static var infinity:Float;
public static var neg_infinity:Float;
public static var nan:Float;
public static var max_float:Float;
public static var min_float:Float;
public static var epsilon_float:Float;
public static function classify_float(a0:Dynamic):Dynamic;
public static function string_length(a0:String):Int;
public static function bytes_length(a0:haxe.io.Bytes):Int;
public static function bytes_create(a0:Int):haxe.io.Bytes;
public static function string_blit(a0:String,a1:Int,a2:haxe.io.Bytes,a3:Int,a4:Int):Void;
public static function bytes_blit(a0:haxe.io.Bytes,a1:Int,a2:haxe.io.Bytes,a3:Int,a4:Int):Void;
public static function bytes_unsafe_to_string(a0:haxe.io.Bytes):String;
public static function int_of_char(a0:OCamlChar):Int;
public static function unsafe_char_of_int(a0:Int):OCamlChar;
public static function char_of_int(a0:Int):OCamlChar;
public static function ignore(a0:Dynamic):Void;
public static function fst(a0:Dynamic):Dynamic;
public static function snd(a0:Dynamic):Dynamic;
public static function ref(a0:Dynamic):Dynamic;
public static function incr(a0:Dynamic):Void;
public static function decr(a0:Dynamic):Void;
public static function format_int(a0:String,a1:Int):String;
public static function format_float(a0:String,a1:Float):String;
public static function string_of_bool(a0:Bool):String;
public static function bool_of_string(a0:String):Bool;
public static function bool_of_string_opt(a0:String):Dynamic;
public static function string_of_int(a0:Int):String;
public static function int_of_string(a0:String):Int;
public static function int_of_string_opt(a0:String):Dynamic;
public static function string_get(a0:String,a1:Int):OCamlChar;
public static function valid_float_lexem(a0:String):String;
public static function string_of_float(a0:Float):String;
public static function float_of_string(a0:String):Float;
public static function float_of_string_opt(a0:String):Dynamic;
public static function open_descriptor_out(a0:Int):Dynamic;
public static function open_descriptor_in(a0:Int):Dynamic;
public static var stdin:Dynamic;
public static var stdout:Dynamic;
public static var stderr:Dynamic;
public static function open_desc(a0:String,a1:Dynamic,a2:Int):Int;
public static function set_out_channel_name(a0:Dynamic,a1:String):Void;
public static function open_out_gen(a0:Dynamic,a1:Int,a2:String):Dynamic;
public static function open_out(a0:String):Dynamic;
public static function open_out_bin(a0:String):Dynamic;
public static function flush(a0:Dynamic):Void;
public static function out_channels_list(a0:Void):Dynamic;
public static function flush_all(a0:Void):Void;
public static function unsafe_output(a0:Dynamic,a1:haxe.io.Bytes,a2:Int,a3:Int):Void;
public static function unsafe_output_string(a0:Dynamic,a1:String,a2:Int,a3:Int):Void;
public static function output_char(a0:Dynamic,a1:OCamlChar):Void;
public static function output_bytes(a0:Dynamic,a1:haxe.io.Bytes):Void;
public static function output_string(a0:Dynamic,a1:String):Void;
public static function output(a0:Dynamic,a1:haxe.io.Bytes,a2:Int,a3:Int):Void;
public static function output_substring(a0:Dynamic,a1:String,a2:Int,a3:Int):Void;
public static function output_byte(a0:Dynamic,a1:Int):Void;
public static function output_binary_int(a0:Dynamic,a1:Int):Void;
public static function marshal_to_channel(a0:Dynamic,a1:Dynamic,a2:Dynamic):Void;
public static function output_value(a0:Dynamic,a1:Dynamic):Void;
public static function seek_out(a0:Dynamic,a1:Int):Void;
public static function pos_out(a0:Dynamic):Int;
public static function out_channel_length(a0:Dynamic):Int;
public static function close_out_channel(a0:Dynamic):Void;
public static function close_out(a0:Dynamic):Void;
public static function close_out_noerr(a0:Dynamic):Void;
public static function set_binary_mode_out(a0:Dynamic,a1:Bool):Void;
public static function set_in_channel_name(a0:Dynamic,a1:String):Void;
public static function open_in_gen(a0:Dynamic,a1:Int,a2:String):Dynamic;
public static function open_in(a0:String):Dynamic;
public static function open_in_bin(a0:String):Dynamic;
public static function input_char(a0:Dynamic):OCamlChar;
public static function unsafe_input(a0:Dynamic,a1:haxe.io.Bytes,a2:Int,a3:Int):Int;
public static function input(a0:Dynamic,a1:haxe.io.Bytes,a2:Int,a3:Int):Int;
public static function unsafe_really_input(a0:Dynamic,a1:haxe.io.Bytes,a2:Int,a3:Int):Void;
public static function really_input(a0:Dynamic,a1:haxe.io.Bytes,a2:Int,a3:Int):Void;
public static function really_input_string(a0:Dynamic,a1:Int):String;
public static function input_scan_line(a0:Dynamic):Int;
public static function input_line(a0:Dynamic):String;
public static function input_byte(a0:Dynamic):Int;
public static function input_binary_int(a0:Dynamic):Int;
public static function input_value(a0:Dynamic):Dynamic;
public static function seek_in(a0:Dynamic,a1:Int):Void;
public static function pos_in(a0:Dynamic):Int;
public static function in_channel_length(a0:Dynamic):Int;
public static function close_in(a0:Dynamic):Void;
public static function close_in_noerr(a0:Dynamic):Void;
public static function set_binary_mode_in(a0:Dynamic,a1:Bool):Void;
public static function print_char(a0:OCamlChar):Void;
public static function print_string(a0:String):Void;
public static function print_bytes(a0:haxe.io.Bytes):Void;
public static function print_int(a0:Int):Void;
public static function print_float(a0:Float):Void;
public static function print_endline(a0:String):Void;
public static function print_newline(a0:Void):Void;
public static function prerr_char(a0:OCamlChar):Void;
public static function prerr_string(a0:String):Void;
public static function prerr_bytes(a0:haxe.io.Bytes):Void;
public static function prerr_int(a0:Int):Void;
public static function prerr_float(a0:Float):Void;
public static function prerr_endline(a0:String):Void;
public static function prerr_newline(a0:Void):Void;
public static function read_line(a0:Void):String;
public static function read_int(a0:Void):Int;
public static function read_int_opt(a0:Void):Dynamic;
public static function read_float(a0:Void):Float;
public static function read_float_opt(a0:Void):Dynamic;
// public static function seek_out(a0:Dynamic,a1:Dynamic):Void;
// public static function pos_out(a0:Dynamic):Dynamic;
// public static function out_channel_length(a0:Dynamic):Dynamic;
// public static function seek_in(a0:Dynamic,a1:Dynamic):Void;
// public static function pos_in(a0:Dynamic):Dynamic;
// public static function in_channel_length(a0:Dynamic):Dynamic;
public static function string_of_format(a0:Dynamic):String;
public static var format_of_string:Dynamic;
public static function sys_exit(a0:Int):Dynamic;
public static var exit_function:Dynamic;
public static function at_exit(a0:Void->Void):Void;
public static function do_at_exit(a0:Void):Void;
public static function exit(a0:Int):Dynamic;
public static function major(a0:Void):Void;
public static function naked_pointers_checked(a0:Void):Bool;
}