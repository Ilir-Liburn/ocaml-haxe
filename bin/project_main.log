[Function:() -> String]
	[Block:Dynamic]
		[While:Void]
			[Const:Bool] true
			[Block:Dynamic] [Return:Dynamic] [Const:String] "false"
		[Return:Dynamic] [Const:String] "true"[Function:() -> Void]
	[Block:Void]
		[Var data(975153):String] [Const:String] "1,2,3,4,5,6"
		[Var array(975154):Array<String>]
			[Call:Array<String>]
				[Field:(a0 : OCamlChar, a1 : String) -> Array<String>]
					[TypeExpr OCamlString:Class<OCamlString>]
					[FStatic:(a0 : OCamlChar, a1 : String) -> Array<String>]
						OCamlString
						split_on_char:(a0 : OCamlChar, a1 : String) -> Array<String>
				[Const:String] ","
				[Local data(975153):String:String]
		[Block:Void]
			[Var `(975156):Int] [Const:Int] 0
			[While:Void]
				[Binop:Bool]
					[Local `(975156):Int:Int]
					<
					[Field:Int]
						[Local array(975154):Array<String>:Array<String>]
						[FInstance:Int]
							Array<String>
							length:Int
				[Block:Void]
					[Var s(975155):String]
						[Array:String]
							[Local array(975154):Array<String>:Array<String>]
							[Local `(975156):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local `(975156):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Const:String] "拆分后："
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 17
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
							customParams: [ArrayDecl:Array<Dynamic>] [Local s(975155):String:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "文本的长度:"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 19
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Field:Int]
						[Local data(975153):String:String]
						[FInstance:Int]
							String
							length:Int
					[Call:String]
						[Field:() -> String]
							[TypeExpr project.Main:Class<project.Main>]
							[FStatic:() -> String]
								project.Main
								call:() -> String
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "文本内容："
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 21
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Call:String]
						[Field:(path : String) -> String]
							[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
							[FStatic:(path : String) -> String]
								ocaml.lib.File
								getContent:(path : String) -> String
						[Const:String] "build.hxml"
		[Call:Void]
			[Field:(srcPath : String, dstPath : String) -> Void]
				[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
				[FStatic:(srcPath : String, dstPath : String) -> Void]
					ocaml.lib.File
					copy:(srcPath : String, dstPath : String) -> Void
			[Const:String] "build.hxml"
			[Const:String] "build-copy.hxml"
		[Call:Void]
			[Field:(srcPath : String, dstPath : String) -> Void]
				[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
				[FStatic:(srcPath : String, dstPath : String) -> Void]
					ocaml.lib.File
					copy:(srcPath : String, dstPath : String) -> Void
			[Const:String] "../test.mp4"
			[Const:String] "../test-2.mp4"