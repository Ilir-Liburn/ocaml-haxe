[Function:() -> String]
	[Block:Dynamic]
		[While:Void]
			[Parenthesis:Bool] [Const:Bool] true
			[Return:Dynamic] [Const:String] "false"
		[Return:Dynamic] [Const:String] "true"[Function:() -> Void]
	[Block:Void]
		[Var data(2859595):String] [Const:String] "1,2,3,4,5,6"
		[Var array(2859596):Array<String>]
			[Call:Array<String>]
				[Field:(a0 : Dynamic, a1 : String) -> Array<String>]
					[TypeExpr ocaml.OCamlStringTools:Class<ocaml.OCamlStringTools>]
					[FStatic:(a0 : Dynamic, a1 : String) -> Array<String>]
						ocaml.OCamlStringTools
						split_on_char:(a0 : Dynamic, a1 : String) -> Array<String>
				[Const:String] ","
				[Local data(2859595):String:String]
		[Block:Void]
			[Var _g(2859598):Int] [Const:Int] 0
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local _g(2859598):Int:Int]
						<
						[Field:Int]
							[Local array(2859596):Array<String>:Array<String>]
							[FInstance:Int]
								Array<String>
								length:Int
				[Block:Void]
					[Var s(2859597):String]
						[Array:String]
							[Local array(2859596):Array<String>:Array<String>]
							[Local _g(2859598):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local _g(2859598):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Const:String] "拆分后："
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 20
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
							customParams: [ArrayDecl:Array<Dynamic>] [Local s(2859597):String:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "文本的长度:"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 22
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Field:Int]
						[Local data(2859595):String:String]
						[FInstance:Int]
							String
							length:Int
					[Call:String]
						[Field:() -> String]
							[TypeExpr project.Main:Class<project.Main>]
							[FStatic:() -> String]
								project.Main
								call:() -> String
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "文本内容："
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 24
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Call:String]
						[Field:(path : String) -> String]
							[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
							[FStatic:(path : String) -> String]
								ocaml.lib.File
								getContent:(path : String) -> String
						[Const:String] "build.hxml"
		[Call:Void]
			[Field:(srcPath : String, dstPath : String) -> Void]
				[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
				[FStatic:(srcPath : String, dstPath : String) -> Void]
					ocaml.lib.File
					copy:(srcPath : String, dstPath : String) -> Void
			[Const:String] "build.hxml"
			[Const:String] "build-copy.hxml"
		[If:Void]
			[Parenthesis:Bool]
				[Call:Bool]
					[Field:(file : String) -> Bool]
						[TypeExpr ocaml.lib.FileSystem:Class<ocaml.lib.FileSystem>]
						[FStatic:(file : String) -> Bool]
							ocaml.lib.FileSystem
							exists:(file : String) -> Bool
					[Const:String] "../test-2.mp4"
			[Then:Void] [Call:Void]
				[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					[TypeExpr haxe.Log:Class<haxe.Log>]
					[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
						haxe.Log
						trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
				[Const:String] "已经存在"
				[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
					fileName: [Const:String] "haxe_test/project/Main.hx"
					lineNumber: [Const:Int] 28
					className: [Const:String] "project.Main"
					methodName: [Const:String] "main"
			[Else:Void] [Call:Void]
				[Field:(srcPath : String, dstPath : String) -> Void]
					[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
					[FStatic:(srcPath : String, dstPath : String) -> Void]
						ocaml.lib.File
						copy:(srcPath : String, dstPath : String) -> Void
				[Const:String] "../test.mp4"
				[Const:String] "../test-2.mp4"
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "拷贝完毕"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 31
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
		[Var files(2859599):ocaml.OCamlArray<String>]
			[Call:ocaml.OCamlArray<String>]
				[Field:(path : String) -> ocaml.OCamlArray<String>]
					[TypeExpr ocaml.lib.FileSystem:Class<ocaml.lib.FileSystem>]
					[FStatic:(path : String) -> ocaml.OCamlArray<String>]
						ocaml.lib.FileSystem
						readDirectory:(path : String) -> ocaml.OCamlArray<String>
				[Const:String] "./"
		[Block:Void]
			[Var _g(2859602):Int] [Const:Int] 0
			[Var _g1(2859603):Array<String>] [Cast:Array<String>] [Local files(2859599):ocaml.OCamlArray<String>:ocaml.OCamlArray<String>]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local _g(2859602):Int:Int]
						<
						[Field:Int]
							[Local _g1(2859603):Array<String>:Array<String>]
							[FInstance:Int]
								Array<String>
								length:Int
				[Block:Void]
					[Var s(2859601):String]
						[Array:String]
							[Local _g1(2859603):Array<String>:Array<String>]
							[Local _g(2859602):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local _g(2859602):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Const:String] "文件："
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 35
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
							customParams: [ArrayDecl:Array<Dynamic>] [Local s(2859601):String:String]