[Function:() -> String]
	[Block:Dynamic]
		[While:Void]
			[Const:Bool] true
			[Block:Dynamic] [Return:Dynamic] [Const:String] "false"
		[Return:Dynamic] [Const:String] "true"[Function:() -> Void]
	[Block:Void]
		[Var data(3241277):String] [Const:String] "1,2,3,4,5,6"
		[Var array(3241278):Array<String>]
			[Call:Array<String>]
				[Field:(a0 : ocaml.Char, a1 : String) -> Array<String>]
					[TypeExpr ocaml.OCamlStringTools:Class<ocaml.OCamlStringTools>]
					[FStatic:(a0 : ocaml.Char, a1 : String) -> Array<String>]
						ocaml.OCamlStringTools
						split_on_char:(a0 : ocaml.Char, a1 : String) -> Array<String>
				[Const:String] ","
				[Local data(3241277):String:String]
		[Block:Void]
			[Var `(3241280):Int] [Const:Int] 0
			[While:Void]
				[Binop:Bool]
					[Local `(3241280):Int:Int]
					<
					[Field:Int]
						[Local array(3241278):Array<String>:Array<String>]
						[FInstance:Int]
							Array<String>
							length:Int
				[Block:Void]
					[Var s(3241279):String]
						[Array:String]
							[Local array(3241278):Array<String>:Array<String>]
							[Local `(3241280):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local `(3241280):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Const:String] "split:"
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 20
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
							customParams: [ArrayDecl:Array<Dynamic>] [Local s(3241279):String:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "data.length=:"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 22
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Field:Int]
						[Local data(3241277):String:String]
						[FInstance:Int]
							String
							length:Int
					[Call:String]
						[Field:() -> String]
							[TypeExpr project.Main:Class<project.Main>]
							[FStatic:() -> String]
								project.Main
								call:() -> String
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "data="
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 24
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Call:String]
						[Field:(path : String) -> String]
							[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
							[FStatic:(path : String) -> String]
								ocaml.lib.File
								getContent:(path : String) -> String
						[Const:String] "build.hxml"
		[Call:Void]
			[Field:(srcPath : String, dstPath : String) -> Void]
				[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
				[FStatic:(srcPath : String, dstPath : String) -> Void]
					ocaml.lib.File
					copy:(srcPath : String, dstPath : String) -> Void
			[Const:String] "build.hxml"
			[Const:String] "build-copy.hxml"
		[If:Void]
			[Call:Bool]
				[Field:(file : String) -> Bool]
					[TypeExpr ocaml.lib.FileSystem:Class<ocaml.lib.FileSystem>]
					[FStatic:(file : String) -> Bool]
						ocaml.lib.FileSystem
						exists:(file : String) -> Bool
				[Const:String] "../test-2.mp4"
			[Then:Void] [Block:Void]
				[Call:Void]
					[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
						[TypeExpr haxe.Log:Class<haxe.Log>]
						[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							haxe.Log
							trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
					[Const:String] "exists"
					[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
						fileName: [Const:String] "haxe_test/project/Main.hx"
						lineNumber: [Const:Int] 28
						className: [Const:String] "project.Main"
						methodName: [Const:String] "main"
			[Else:Void] [Block:Void]
				[Call:Void]
					[Field:(srcPath : String, dstPath : String) -> Void]
						[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
						[FStatic:(srcPath : String, dstPath : String) -> Void]
							ocaml.lib.File
							copy:(srcPath : String, dstPath : String) -> Void
					[Const:String] "../test.mp4"
					[Const:String] "../test-2.mp4"
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "copy success"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 31
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
		[Var files(3241281):ocaml.OCamlArray<String>]
			[Call:ocaml.OCamlArray<String>]
				[Field:(path : String) -> ocaml.OCamlArray<String>]
					[TypeExpr ocaml.lib.FileSystem:Class<ocaml.lib.FileSystem>]
					[FStatic:(path : String) -> ocaml.OCamlArray<String>]
						ocaml.lib.FileSystem
						readDirectory:(path : String) -> ocaml.OCamlArray<String>
				[Const:String] "./"
		[Block:Void]
			[Var `1(3241285):Int] [Const:Int] 0
			[Var `2(3241286):Array<String>] [Cast:Array<String>] [Local files(3241281):ocaml.OCamlArray<String>:ocaml.OCamlArray<String>]
			[While:Void]
				[Binop:Bool]
					[Local `1(3241285):Int:Int]
					<
					[Field:Int]
						[Local `2(3241286):Array<String>:Array<String>]
						[FInstance:Int]
							Array<String>
							length:Int
				[Block:Void]
					[Var s(3241283):String]
						[Array:String]
							[Local `2(3241286):Array<String>:Array<String>]
							[Local `1(3241285):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local `1(3241285):Int:Int]
					[Var stat(3241284):ocaml.Unix_Stats]
						[Call:ocaml.Unix_Stats]
							[Field:(path : String) -> ocaml.Unix_Stats]
								[TypeExpr ocaml.lib.FileSystem:Class<ocaml.lib.FileSystem>]
								[FStatic:(path : String) -> ocaml.Unix_Stats]
									ocaml.lib.FileSystem
									stat:(path : String) -> ocaml.Unix_Stats
							[Local s(3241283):String:String]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Const:String] "file:"
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 36
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
							customParams: [ArrayDecl:Array<Dynamic>]
								[Local s(3241283):String:String]
								[Const:String] "   create time:"
								[Field:Float]
									[Local stat(3241284):ocaml.Unix_Stats:ocaml.Unix_Stats]
									[FInstance:Float]
										ocaml.Unix_Stats
										st_ctime:Float