[Function:(s : String) -> String]
	[Arg:String] [Local s(160458):String]
	[Block:Dynamic] [Return:Dynamic] [Local s(160458):String:String][Function:() -> Void]
	[Block:Void]
		[Var a(160459):String] [Const:String] "test"
		[Var b(160460):String] [Const:String] "README.md"
		[Var content(160461):String]
			[Call:String]
				[Field:(path : String) -> String]
					[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
					[FStatic:(path : String) -> String]
						ocaml.lib.File
						getContent:(path : String) -> String
				[Local b(160460):String:String]
		[Var input(160462):ocaml.InputChannel]
			[Call:ocaml.InputChannel]
				[Field:(path : String) -> ocaml.InputChannel]
					[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
					[FStatic:(path : String) -> ocaml.InputChannel]
						ocaml.Stdlib
						openInput:(path : String) -> ocaml.InputChannel
				[Local b(160460):String:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "HelloWorld:"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 22
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Call:String]
						[Field:(s : String) -> String]
							[TypeExpr project.Main:Class<project.Main>]
							[FStatic:(s : String) -> String]
								project.Main
								afunc:(s : String) -> String
						[Call:String]
							[Field:(input : ocaml.InputChannel) -> String]
								[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
								[FStatic:(input : ocaml.InputChannel) -> String]
									ocaml.Stdlib
									inputLine:(input : ocaml.InputChannel) -> String
							[Local input(160462):ocaml.InputChannel:ocaml.InputChannel]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "Goods!"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 23
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>] [Local content(160461):String:String]
		[Var array(160463):ocaml.OCamlArray<String>]
			[Field:ocaml.OCamlArray<String>]
				[TypeExpr ocaml.OCamlSys:Class<ocaml.OCamlSys>]
				[FStatic:ocaml.OCamlArray<String>]
					ocaml.OCamlSys
					args:ocaml.OCamlArray<String>
		[Block:Void]
			[Var `(160466):Int] [Const:Int] 0
			[Var `1(160467):Array<String>] [Cast:Array<String>] [Local array(160463):ocaml.OCamlArray<String>:ocaml.OCamlArray<String>]
			[While:Void]
				[Binop:Bool]
					[Local `(160466):Int:Int]
					<
					[Field:Int]
						[Local `1(160467):Array<String>:Array<String>]
						[FInstance:Int]
							Array<String>
							length:Int
				[Block:Void]
					[Var item(160465):String]
						[Array:String]
							[Local `1(160467):Array<String>:Array<String>]
							[Local `(160466):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local `(160466):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Local item(160465):String:String]
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 27
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
		[Var list(160468):Array<Int>]
			[ArrayDecl:Array<Int>]
				[Const:Int] 1
				[Const:Int] 2
				[Const:Int] 3
				[Const:Int] 4
				[Const:Int] 5
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(160468):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 123
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(160468):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 7
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(160468):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 8
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(160468):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 9
		[Binop:Array<Int>]
			[Local list(160468):Array<Int>:Array<Int>]
			=
			[Call:Array<Int>]
				[Field:(a : Array<Int>) -> Array<Int>]
					[Local list(160468):Array<Int>:Array<Int>]
					[FInstance:(a : Array<Int>) -> Array<Int>]
						Array<Int>
						concat:(a : Array<Array.T>) -> Array<Array.T>
				[ArrayDecl:Array<Int>]
					[Const:Int] 10
					[Const:Int] 11
					[Const:Int] 12
		[Block:Void]
			[Var `2(160470):Int] [Const:Int] 0
			[While:Void]
				[Binop:Bool]
					[Local `2(160470):Int:Int]
					<
					[Field:Int]
						[Local list(160468):Array<Int>:Array<Int>]
						[FInstance:Int]
							Array<Int>
							length:Int
				[Block:Void]
					[Var i(160469):Int]
						[Array:Int]
							[Local list(160468):Array<Int>:Array<Int>]
							[Local `2(160470):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local `2(160470):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Local i(160469):Int:Int]
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 37
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
		[Var content2(160471):String] [Const:String] "test"
		[Binop:String]
			[Local content2(160471):String:String]
			=
			[Call:String]
				[Field:(a0 : String, a1 : Array<String>) -> String]
					[TypeExpr OCamlString:{ Statics OCamlString }]
					[FStatic:(a0 : String, a1 : Array<String>) -> String]
						OCamlString
						concat:(a0 : String, a1 : Array<String>) -> String
				[Local content2(160471):String:String]
				[ArrayDecl:Array<String>]
					[Const:String] "1"
					[Const:String] "2"
					[Const:String] "3"
					[Const:String] "4"
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "拼接后："
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 42
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>] [Local content2(160471):String:String]
		[Var content2(160472):String]
			[Call:String]
				[Field:(a0 : String, a1 : Array<String>) -> String]
					[TypeExpr OCamlString:Class<OCamlString>]
					[FStatic:(a0 : String, a1 : Array<String>) -> String]
						OCamlString
						concat:(a0 : String, a1 : Array<String>) -> String
				[Const:String] "test"
				[ArrayDecl:Array<String>]
					[Const:String] "123"
					[Const:String] "123"
					[Const:String] "123"
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "拼接字符串："
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 45
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>] [Local content2(160472):String:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Call:Int]
				[Field:(a0 : String, a1 : OCamlChar) -> Int]
					[TypeExpr OCamlString:{ Statics OCamlString }]
					[FStatic:(a0 : String, a1 : OCamlChar) -> Int]
						OCamlString
						index:(a0 : String, a1 : OCamlChar) -> Int
				[Local content2(160472):String:String]
				[Const:String] "3"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 46
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Binop:String]
				[Const:String] "文本的长度："
				+
				[Field:Int]
					[Local content(160461):String:String]
					[FInstance:Int]
						String
						length:Int
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 47
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
		[Var list(160473):Array<String>]
			[Call:Array<String>]
				[Field:(a0 : OCamlChar, a1 : String) -> Array<String>]
					[TypeExpr OCamlString:Class<OCamlString>]
					[FStatic:(a0 : OCamlChar, a1 : String) -> Array<String>]
						OCamlString
						split_on_char:(a0 : OCamlChar, a1 : String) -> Array<String>
				[Const:String] "\n"
				[Local content(160461):String:String]
		[Block:Void]
			[Var `3(160475):Int] [Const:Int] 0
			[While:Void]
				[Binop:Bool]
					[Local `3(160475):Int:Int]
					<
					[Field:Int]
						[Local list(160473):Array<String>:Array<String>]
						[FInstance:Int]
							Array<String>
							length:Int
				[Block:Void]
					[Var s(160474):String]
						[Array:String]
							[Local list(160473):Array<String>:Array<String>]
							[Local `3(160475):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local `3(160475):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Const:String] "切割了？"
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 51
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
							customParams: [ArrayDecl:Array<Dynamic>] [Local s(160474):String:String]
		[Binop:String]
			[Local content(160461):String:String]
			=
			[Call:String]
				[Field:(a0 : (OCamlChar -> OCamlChar), a1 : String) -> String]
					[TypeExpr OCamlString:Class<OCamlString>]
					[FStatic:(a0 : (OCamlChar -> OCamlChar), a1 : String) -> String]
						OCamlString
						map:(a0 : (OCamlChar -> OCamlChar), a1 : String) -> String
				[Function:(data : OCamlChar) -> OCamlChar]
					[Arg:OCamlChar] [Local data(160476):OCamlChar]
					[Block:Dynamic]
						[If:Void]
							[Binop:Bool]
								[Local data(160476):OCamlChar:OCamlChar]
								==
								[Const:String] "\n"
							[Then:Dynamic] [Block:Dynamic] [Return:Dynamic] [Local data(160476):OCamlChar:OCamlChar]
						[Return:Dynamic] [Const:String] "2"
				[Local content(160461):String:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "发生了什么？"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 62
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>] [Local content(160461):String:String]