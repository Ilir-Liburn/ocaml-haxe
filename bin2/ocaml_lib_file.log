[Function:(path : String) -> String]
	[Arg:String] [Local path(7788):String]
	[Block:Dynamic]
		[Var input(7789):ocaml.InputChannel]
			[Call:ocaml.InputChannel]
				[Field:(path : String) -> ocaml.InputChannel]
					[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
					[FStatic:(path : String) -> ocaml.InputChannel]
						ocaml.Stdlib
						openInput:(path : String) -> ocaml.InputChannel
				[Local path(7788):String:String]
		[Var context(7790):String]
			[Call:String]
				[Field:(input : ocaml.InputChannel) -> String]
					[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
					[FStatic:(input : ocaml.InputChannel) -> String]
						ocaml.Stdlib
						inputLine:(input : ocaml.InputChannel) -> String
				[Local input(7789):ocaml.InputChannel:ocaml.InputChannel]
		[Binop:String]
			[Local context(7790):String:String]
			+=
			[Call:String]
				[Field:(input : ocaml.InputChannel) -> String]
					[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
					[FStatic:(input : ocaml.InputChannel) -> String]
						ocaml.Stdlib
						inputLine:(input : ocaml.InputChannel) -> String
				[Local input(7789):ocaml.InputChannel:ocaml.InputChannel]
		[Var line(7791):String] [Const:String] ""
		[While:Void]
			[Parenthesis:Bool] [Const:Bool] true
			[Binop:String]
				[Local line(7791):String:String]
				+=
				[Binop:String]
					[Call:String]
						[Field:(input : ocaml.InputChannel) -> String]
							[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
							[FStatic:(input : ocaml.InputChannel) -> String]
								ocaml.Stdlib
								inputLine:(input : ocaml.InputChannel) -> String
						[Local input(7789):ocaml.InputChannel:ocaml.InputChannel]
					+
					[Const:String] "\n"
		[Return:Dynamic] [Local context(7790):String:String]