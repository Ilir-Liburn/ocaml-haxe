[Function:(path : String) -> String]
	[Arg:String] [Local path(8622):String]
	[Block:Dynamic]
		[Var input(8623):ocaml.InputChannel]
			[Call:ocaml.InputChannel]
				[Field:(path : String) -> ocaml.InputChannel]
					[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
					[FStatic:(path : String) -> ocaml.InputChannel]
						ocaml.Stdlib
						openInput:(path : String) -> ocaml.InputChannel
				[Local path(8622):String:String]
		[Var line(8624):String] [Const:String] ""
		[While:Void]
			[Parenthesis:Bool] [Const:Bool] true
			[Try:Void]
				[Block:String]
					[Binop:String]
						[Local line(8624):String:String]
						+=
						[Binop:String]
							[Call:String]
								[Field:(input : ocaml.InputChannel) -> String]
									[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
									[FStatic:(input : ocaml.InputChannel) -> String]
										ocaml.Stdlib
										inputLine:(input : ocaml.InputChannel) -> String
								[Local input(8623):ocaml.InputChannel:ocaml.InputChannel]
							+
							[Const:String] "\n"
				Catch [Local e(8625):haxe.Exception]
					[Block:Dynamic]
						[Call:Void]
							[Field:(input : ocaml.InputChannel) -> Void]
								[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
								[FStatic:(input : ocaml.InputChannel) -> Void]
									ocaml.Stdlib
									closeInput:(input : ocaml.InputChannel) -> Void
							[Local input(8623):ocaml.InputChannel:ocaml.InputChannel]
						[Return:Dynamic] [Local line(8624):String:String]
		[Return:Dynamic] [Local line(8624):String:String]