[Function:(s : String) -> String]
	[Arg:String] [Local s(255783):String]
	[Block:Dynamic] [Return:Dynamic] [Local s(255783):String:String][Function:() -> Void]
	[Block:Void]
		[Var a(255784):String] [Const:String] "test"
		[Var b(255785):String] [Const:String] "README.md"
		[Var content(255786):String]
			[Call:String]
				[Field:(path : String) -> String]
					[TypeExpr ocaml.lib.File:Class<ocaml.lib.File>]
					[FStatic:(path : String) -> String]
						ocaml.lib.File
						getContent:(path : String) -> String
				[Local b(255785):String:String]
		[Var input(255787):ocaml.InputChannel]
			[Call:ocaml.InputChannel]
				[Field:(path : String) -> ocaml.InputChannel]
					[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
					[FStatic:(path : String) -> ocaml.InputChannel]
						ocaml.Stdlib
						openInput:(path : String) -> ocaml.InputChannel
				[Local b(255785):String:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "HelloWorld:"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 20
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Call:String]
						[Field:(s : String) -> String]
							[TypeExpr project.Main:Class<project.Main>]
							[FStatic:(s : String) -> String]
								project.Main
								afunc:(s : String) -> String
						[Call:String]
							[Field:(input : ocaml.InputChannel) -> String]
								[TypeExpr ocaml.Stdlib:Class<ocaml.Stdlib>]
								[FStatic:(input : ocaml.InputChannel) -> String]
									ocaml.Stdlib
									inputLine:(input : ocaml.InputChannel) -> String
							[Local input(255787):ocaml.InputChannel:ocaml.InputChannel]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "Goods!"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "haxe_test/project/Main.hx"
				lineNumber: [Const:Int] 21
				className: [Const:String] "project.Main"
				methodName: [Const:String] "main"
				customParams: [ArrayDecl:Array<Dynamic>] [Local content(255786):String:String]
		[Var array(255788):ocaml.OCamlArray<String>]
			[Field:ocaml.OCamlArray<String>]
				[TypeExpr ocaml.OCamlSys:Class<ocaml.OCamlSys>]
				[FStatic:ocaml.OCamlArray<String>]
					ocaml.OCamlSys
					args:ocaml.OCamlArray<String>
		[Block:Void]
			[Var _g(255791):Int] [Const:Int] 0
			[Var _g1(255792):Array<String>] [Cast:Array<String>] [Local array(255788):ocaml.OCamlArray<String>:ocaml.OCamlArray<String>]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local _g(255791):Int:Int]
						<
						[Field:Int]
							[Local _g1(255792):Array<String>:Array<String>]
							[FInstance:Int]
								Array<String>
								length:Int
				[Block:Void]
					[Var item(255790):String]
						[Array:String]
							[Local _g1(255792):Array<String>:Array<String>]
							[Local _g(255791):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local _g(255791):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Local item(255790):String:String]
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 25
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"
		[Var list(255793):Array<Int>]
			[ArrayDecl:Array<Int>]
				[Const:Int] 1
				[Const:Int] 2
				[Const:Int] 3
				[Const:Int] 4
				[Const:Int] 5
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(255793):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 123
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(255793):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 7
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(255793):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 8
		[Call:Int]
			[Field:(x : Int) -> Int]
				[Local list(255793):Array<Int>:Array<Int>]
				[FInstance:(x : Int) -> Int]
					Array<Int>
					push:(x : Array.T) -> Int
			[Const:Int] 9
		[Binop:Array<Int>]
			[Local list(255793):Array<Int>:Array<Int>]
			=
			[Call:Array<Int>]
				[Field:(a : Array<Int>) -> Array<Int>]
					[Local list(255793):Array<Int>:Array<Int>]
					[FInstance:(a : Array<Int>) -> Array<Int>]
						Array<Int>
						concat:(a : Array<Array.T>) -> Array<Array.T>
				[ArrayDecl:Array<Int>]
					[Const:Int] 10
					[Const:Int] 11
					[Const:Int] 12
		[Block:Void]
			[Var _g(255795):Int] [Const:Int] 0
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local _g(255795):Int:Int]
						<
						[Field:Int]
							[Local list(255793):Array<Int>:Array<Int>]
							[FInstance:Int]
								Array<Int>
								length:Int
				[Block:Void]
					[Var i(255794):Int]
						[Array:Int]
							[Local list(255793):Array<Int>:Array<Int>]
							[Local _g(255795):Int:Int]
					[Unop:Int]
						++
						Prefix
						[Local _g(255795):Int:Int]
					[Call:Void]
						[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
							[TypeExpr haxe.Log:Class<haxe.Log>]
							[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
								haxe.Log
								trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
						[Local i(255794):Int:Int]
						[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, className : String }]
							fileName: [Const:String] "haxe_test/project/Main.hx"
							lineNumber: [Const:Int] 35
							className: [Const:String] "project.Main"
							methodName: [Const:String] "main"